import pandas as pd
import pickle
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

complete_dataset = pd.read_excel('sickness_table_with_features_sinusoidal.xlsx')

X_test = complete_dataset[['sinusoidal_num_healthy', 'sinusoidal_num_calls', 'month_sin', 'month_cosine', 'year_index']]
y_test = complete_dataset['sby_need_rolling_mean']

# read in training and validation data
X_train = pd.read_excel('X_train.xlsx')
X_val = pd.read_excel('X_val.xlsx')
y_train = pd.read_excel('y_train.xlsx')
y_val = pd.read_excel('y_val.xlsx')


# scale the features using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)
X_test = scaler.transform(X_test)

# import optimized model
with open('Gradient_Boost_optimized.pkl', 'rb') as f:
    model = pickle.load(f)

min_cutoff_values = [1, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
scaling_factors = [1, 1.01, 1.05, 1.1, 1.2, 1.5, 2, 2.2, 2.5, 2.7, 2.8, 3.5, 3.6]
best_min_cut_off = None
best_scaling_factor = None
min_insufficiency_percentage = 100

for min_cut_off in min_cutoff_values:
    for scaling_factor in scaling_factors:
        preds = model.predict(X_test)
        preds_rounded = np.round(preds)
        complete_dataset['model_sby_allocated'] = preds_rounded
        complete_dataset.loc[complete_dataset['model_sby_allocated'] < 0, 'model_sby_allocated'] = 0
        complete_dataset['model_sby_allocated'] *= scaling_factor
        complete_dataset.loc[complete_dataset['model_sby_allocated'] < min_cut_off, 'model_sby_allocated'] = min_cut_off
        complete_dataset['model_drafted'] = complete_dataset['sby_need'] - complete_dataset[
            'model_sby_allocated']
        complete_dataset.loc[complete_dataset['model_drafted'] < 0, 'model_drafted'] = 0

        # next we need to calculate the values using our new standby allocation approach
        # these calculations will be based on the entire dataset
        new_sby_activation_percentage = (sum(complete_dataset['sby_need']) / sum(
            complete_dataset['model_sby_allocated'])) * 100
        new_sby_insufficiency_percentage = (((complete_dataset['model_drafted'] > 0).sum()) / len(
            complete_dataset['model_drafted'])) * 100

        if new_sby_activation_percentage >= 40 and new_sby_insufficiency_percentage < min_insufficiency_percentage:
            best_min_cut_off = min_cut_off
            best_scaling_factor = scaling_factor
            min_insufficiency_percentage = new_sby_insufficiency_percentage

print("Best min_cut_off:", best_min_cut_off)
print("Best scaling_factor:", best_scaling_factor)
print("Minimum new_sby_insufficiency_percentage:", min_insufficiency_percentage)
