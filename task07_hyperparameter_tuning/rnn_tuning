# this script performs hyperparameter tuning on the RNN model

# import libraries
from sklearn.metrics import mean_squared_error, r2_score
from itertools import product
from sklearn.preprocessing import StandardScaler
import pandas as pd
import pickle

from keras.models import Sequential
from keras.layers import Dense, LSTM
from keras.optimizers import Adam, RMSprop
from keras.layers.core import Dropout

# read in training and validation data
X_train = pd.read_excel('X_train.xlsx')
X_val = pd.read_excel('X_val.xlsx')
y_train = pd.read_excel('y_train.xlsx')
y_val = pd.read_excel('y_val.xlsx')

# scale the features using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)

# Reshape the input data to be 3D for LSTM layer
X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_val = X_val.reshape((X_val.shape[0], 1, X_val.shape[1]))

# Define the model architecture
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, X_train.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(1))

# Define the hyperparameter grid
param_grid = {
    'batch_size': [16, 32, 64],
    'epochs': [50, 100, 200],
    'optimizer': [Adam(lr=0.001), RMSprop(lr=0.001)],
    'dropout': [0.1, 0.2, 0.3],
}

# Initialize variables to keep track of the minimum MSE and its corresponding hyperparameters
min_mse = float('inf')
optimized_r2 = 0
min_batch_size = None
min_epochs = None
min_optimizer = None
min_dropout = None

# Create a list of all possible combinations of hyperparameters
hyperparam_combinations = list(product(param_grid['batch_size'], param_grid['epochs'],
                                        param_grid['optimizer'], param_grid['dropout']))

# Iterate over each hyperparameter combination and train the model
for batch_size, epochs, optimizer, dropout in hyperparam_combinations:
    model = Sequential()
    model.add(LSTM(50, activation='relu', input_shape=(1, X_train.shape[2])))
    model.add(Dense(1))
    model.compile(optimizer=optimizer, loss='mse')
    model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(X_val, y_val), verbose=0)
    y_pred = model.predict(X_val)
    mse = mean_squared_error(y_val, y_pred)
    r2 = r2_score(y_val, y_pred)
    print(f"batch_size={batch_size}, epochs={epochs}, optimizer={optimizer}, dropout={dropout} -- Validation Mean Squared Error: {mse}")

    # Update minimum MSE and corresponding hyperparameters
    if mse < min_mse:
        min_mse = mse
        optimized_r2 = r2
        min_batch_size = batch_size
        min_epochs = epochs
        min_optimizer = optimizer
        min_dropout = dropout

# Print the hyperparameters with the lowest MSE
print(f"\nMinimum Validation Mean Squared Error: {min_mse}")
print(f"R2 Score of Optimized Model: {optimized_r2}")
print(f"Hyperparameters: batch_size={min_batch_size}, epochs={min_epochs}, optimizer={min_optimizer}, dropout={min_dropout}")

# Save the model to a file
with open('RNN_optimized.pkl', 'wb') as f:
    pickle.dump(model, f)

# Load the saved model from a file
with open('RNN_optimized.pkl', 'rb') as f:
    model = pickle.load(f)
