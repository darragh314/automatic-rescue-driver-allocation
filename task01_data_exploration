# this script performs EDA

# import libraries
import matplotlib.pyplot as plt
import scipy
import numpy as np
from pandas.plotting import scatter_matrix
import pandas as pd
from sklearn.preprocessing import StandardScaler

# import cleaned dataframe
df_cleaned = pd.read_excel('sickness_table_cleaned.xlsx')

# aggregate rows into monthly bins to check for outliers or missing months
f1 = plt.figure(1)   # monthly data
print(df_cleaned['date'].groupby([df_cleaned["date"].dt.year, df_cleaned["date"].dt.month]).count().plot(kind="bar"))
plt.title("Visualizing the Data using Monthly Bins")
plt.xlabel("Month and Year")
plt.ylabel("Total Monthly Entries")
plt.tight_layout()
plt.show()

# Check the distribution of all features
f2 = plt.figure(2)   # number of drivers sick
df_cleaned['n_sick'].plot(kind='kde')
plt.title("Probability Distribution: Number of On-Duty Drivers Calling in Sick per Day")
plt.xlabel("Number of On-Duty Drivers Calling in Sick")
plt.ylabel("Probability")
plt.tight_layout()
f3 = plt.figure(3)   # number of emergency calls
df_cleaned['calls'].plot(kind='kde')
plt.title("Probability Distribution: Number of Emergency Calls per Day")
plt.xlabel("Number of Emergency Calls in a Day")
plt.ylabel("Probability")
plt.tight_layout()
f4 = plt.figure(4)   # number of drivers on duty
plt.bar(df_cleaned['n_duty'].value_counts().index, df_cleaned['n_duty'].value_counts().values, width = 10)
plt.title("Barchart: Number of Drivers on Duty in a Day")
plt.xlabel("Number of Drivers on Duty in a Day")
plt.ylabel("Days")
f5 = plt.figure(5)   # number of standby drivers activated in a day
df_cleaned['sby_need'].plot(kind='kde', xlim=(0, None))
plt.title("Probability Distribution: Number of Standby Drivers Activated in a Day")
plt.xlabel("Number of Standby Drivers Activated in a Day")
plt.ylabel("Probability")
plt.tight_layout()
f6 = plt.figure(6)   # number of additional drivers needed due to not enough standbys
df_cleaned['drafted'].plot(kind='kde', xlim=(0, None))
plt.title("Probability Distribution: Additional Drivers Needed due to Insufficient Standbys")
plt.xlabel("Number of Additional Drivers Needed due to Not Enough Standbys")
plt.ylabel("Probability")
plt.tight_layout()
plt.show()

# check the correlations between all variables
columns_to_include = [1, 2, 3, 5, 6]
df_subset = df_cleaned.iloc[:, columns_to_include]
correlations = df_subset.corr()
f = plt.figure(figsize=(6, 6))
plt.matshow(df_subset.corr(), fignum=f.number)
plt.xticks(range(df_subset.shape[1]), df_subset.columns, fontsize=12, rotation=45)
plt.yticks(range(df_subset.shape[1]), df_subset.columns, fontsize=12)
cb = plt.colorbar()
cb.ax.tick_params(labelsize=12)
plt.title('Correlation Matrix', fontsize=15)
plt.tight_layout()
# Print correlation coefficients
for i in range(df_subset.shape[1]):
    for j in range(df_subset.shape[1]):
        correlation_coefficient = "{:.2f}".format(correlations.iloc[i, j])
        plt.text(j, i, correlation_coefficient, ha='center', va='center', color='white', fontsize=14)
plt.show()

# print grid of scatterplots
columns_to_include = [1, 2, 3, 5, 6]
df_subset = df_cleaned.iloc[:, columns_to_include]
scatter_matrix(df_subset, figsize=(10, 8))
plt.tight_layout()
plt.show()

print(df_cleaned)

# plot the temporal distributions of the variables
df_cleaned.set_index('date', inplace=True)   # set the date column as the index
df_cleaned['sby_need'].plot(figsize=(10, 5))
plt.title('Number of Standby Drivers Activated Over Time')
plt.xlabel('Date')
plt.ylabel('Number of Standby Drivers Activated')
plt.show()
# Apply a rolling mean with a window of 30 days to smoothen the curve
rolling_mean = df_cleaned['sby_need'].rolling(window=2, center = True).mean()
# Plot the rolling mean against the date column
rolling_mean.plot(figsize=(10, 5))
plt.title('Number of Standby Drivers Activated Over Time (Rolling Mean)')
plt.xlabel('Date')
plt.ylabel('Number of Standby Drivers Activated')
plt.show()








